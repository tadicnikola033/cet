/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forme;

import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import komunikacija.Komunikacija;
import model.User;
import model.Poruka;
import operacije.Operacija;
import transfer.KlijentskiZahtev;
import transfer.ServerskiOdgovor;

/**
 *
 * @author Korisnik
 */
public class GlavnaForma extends javax.swing.JFrame {

    private User ulogovani;
    private List<Poruka> listaPoruka = new ArrayList<>();
    private List<Poruka> poslednje3 = new ArrayList<>();
    private List<Poruka> ostale = new ArrayList<>();
    private Timer autoRefreshTimer;

    /**
     * Creates new form GlavnaForma
     */
    public GlavnaForma(User user) {
        initComponents();
        this.ulogovani = user;
        setLocationRelativeTo(null);
        popuniComboBox();
        
        // Initialize empty lists
        jListPoslednje3.setListData(new String[0]);
        jListOstale.setListData(new String[0]);
        
        // Add title borders to the list boxes for better clarity
        javax.swing.border.TitledBorder border1 = javax.swing.BorderFactory.createTitledBorder("Poslednje 3 poruke");
        javax.swing.border.TitledBorder border2 = javax.swing.BorderFactory.createTitledBorder("Sve ostale poruke");
        jScrollPane2.setBorder(border1);
        jScrollPane3.setBorder(border2);
        
        
        // Load initial messages
        osveziInbox();
        
        // Setup automatic refresh every 3 seconds
        setupAutoRefresh();
    }

    
    private void setupAutoRefresh() {
        // Create a timer that refreshes messages every 3 seconds (3000ms)
        autoRefreshTimer = new Timer(3000, e -> {
            try {
                osveziInbox();
            } catch (Exception ex) {
                // If there's an error, don't stop the timer, just skip this refresh
                System.err.println("Error refreshing messages: " + ex.getMessage());
            }
        });
        autoRefreshTimer.start();
    }
    
    // Clean up the timer when window is closed
    @Override
    public void dispose() {
        if (autoRefreshTimer != null) {
            autoRefreshTimer.stop();
        }
        super.dispose();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaPoruka = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButtonPosalji = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListPoslednje3 = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListOstale = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextAreaPoruka.setColumns(20);
        jTextAreaPoruka.setRows(5);
        jTextAreaPoruka.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextAreaPorukaKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextAreaPoruka);

        jLabel1.setText("Pisite poruku (max 200 karaktera)");

        jButtonPosalji.setText("POSALJI");
        jButtonPosalji.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPosaljiActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "svi" }));
        jComboBox1.setSelectedItem("svi");
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBox1MouseEntered(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Izaberite primaoca");

        jListPoslednje3.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListPoslednje3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListPoslednje3MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jListPoslednje3);

        jListOstale.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListOstale.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListOstaleMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jListOstale);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jButtonPosalji))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jButtonPosalji)))
                .addGap(22, 22, 22)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked
        popuniComboBox();
    }//GEN-LAST:event_jComboBox1MouseClicked

    private void jComboBox1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseEntered

    }//GEN-LAST:event_jComboBox1MouseEntered

    private void jTextAreaPorukaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaPorukaKeyTyped
        if (jTextAreaPoruka.getText().length() >= 200) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "Maksimalno 200 karaktera!");
        }
    }//GEN-LAST:event_jTextAreaPorukaKeyTyped

    private void jButtonPosaljiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPosaljiActionPerformed
        String poruka = jTextAreaPoruka.getText();
        if (poruka.isEmpty()) {
            JOptionPane.showMessageDialog(this, "UNESITE PORUKU");
        }

        Object izabrani = jComboBox1.getSelectedItem();
        if (izabrani == null) {
            JOptionPane.showMessageDialog(this, "Izaberite primaoca");

        }
        if (izabrani.equals("svi")) {
            Object[] niz = {poruka, ulogovani};
            KlijentskiZahtev kz = new KlijentskiZahtev(Operacija.POSALJI_SVIMA, niz);
            Komunikacija.getInstance().posaljiZahtev(kz);
            ServerskiOdgovor so = Komunikacija.getInstance().primiOdgovor();
            jTextAreaPoruka.setText("");
            JOptionPane.showMessageDialog(this, "Poruka poslata");
            // Auto-refresh will update messages automatically
        } else {
            String primalac = (String) izabrani;

            Object[] niz2 = {poruka, ulogovani, primalac};
            KlijentskiZahtev kz2 = new KlijentskiZahtev(Operacija.POSALJI_JEDNOM, niz2);
            Komunikacija.getInstance().posaljiZahtev(kz2);
            ServerskiOdgovor so2 = Komunikacija.getInstance().primiOdgovor();
            jTextAreaPoruka.setText("");
            JOptionPane.showMessageDialog(this, "Poruka poslata");
            // Auto-refresh will update messages automatically

        } //else {
        //JOptionPane.showMessageDialog(this, "Nije poslato");
        //}


    }//GEN-LAST:event_jButtonPosaljiActionPerformed

    private void jListPoslednje3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListPoslednje3MouseClicked
        if (evt.getClickCount() == 2) {
            prikaziCeluPoruku(jListPoslednje3.getSelectedIndex(), true);
        }
    }//GEN-LAST:event_jListPoslednje3MouseClicked

    private void jListOstaleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListOstaleMouseClicked
        if (evt.getClickCount() == 2) {
            prikaziCeluPoruku(jListOstale.getSelectedIndex(), true);
        }
    }//GEN-LAST:event_jListOstaleMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GlavnaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GlavnaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GlavnaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GlavnaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPosalji;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jListOstale;
    private javax.swing.JList<String> jListPoslednje3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextAreaPoruka;
    // End of variables declaration//GEN-END:variables

    public void popuniComboBox() {

        if (jComboBox1.getItemCount() > 0) {
            jComboBox1.removeAllItems();
        }

        KlijentskiZahtev kz = new KlijentskiZahtev(Operacija.VRATI_ULOGOVANE, null);
        Komunikacija.getInstance().posaljiZahtev(kz);

        ServerskiOdgovor so = Komunikacija.getInstance().primiOdgovor();
        List<User> korisnici = (List<User>) so.getOdgovor();

        for (User user : korisnici) {
            if (!ulogovani.equals(user) && jComboBox1.getItemCount() < korisnici.size()) {
                jComboBox1.addItem(user.getIme());
            }
        }
        jComboBox1.addItem("svi");
        Object izabran = jComboBox1.getSelectedItem();
        jComboBox1.setSelectedItem(izabran);
    }

    private void osveziInbox() {
        try {
        KlijentskiZahtev kz = new KlijentskiZahtev(Operacija.VRATI_PORUKE, ulogovani);
        Komunikacija.getInstance().posaljiZahtev(kz);
        ServerskiOdgovor so = Komunikacija.getInstance().primiOdgovor();
        if (so == null) {
            return;
        }
        Object o = so.getOdgovor();
        if (!(o instanceof List)) {
            return;
        }
        List<Poruka> sve = (List<Poruka>) o;
        if (sve.equals(listaPoruka)) {
            return;
        }
        listaPoruka = sve;
        poslednje3 = sve.subList(0, Math.min(3, sve.size()));
        ostale = sve.size() > 3 ? sve.subList(3, sve.size()) : Collections.emptyList();

        List<String> l3 = new ArrayList<>();
        for (Poruka p : poslednje3) {
            l3.add(formatiranje(p));
        }
        List<String> lo = new ArrayList<>();
        for (Poruka p : ostale) {
            lo.add(formatiranje(p));
        }
        
        // Update the JList components with the formatted messages
        jListPoslednje3.setListData(l3.toArray(new String[0]));
        jListOstale.setListData(lo.toArray(new String[0]));
        } catch (Exception ex) {
            // Silently handle errors to avoid interrupting the auto-refresh
            System.err.println("Error in osveziInbox: " + ex.getMessage());
        }
    }

    private void prikaziCeluPoruku(int index, boolean fromLast3) {
        if (index < 0 || listaPoruka.isEmpty()) {
            return;
        }

        Poruka p;
        if (fromLast3) {
            // Message from the "last 3" list (left box)
            if (index >= poslednje3.size()) {
                return;
            }
            p = poslednje3.get(index);
        } else {
            // Message from the "other messages" list (right box)
            if (ostale.isEmpty() || index >= ostale.size()) {
                return;
            }
            p = ostale.get(index);
        }
        
        // Show the full message in a dialog
        String fullMessage = "Od: " + (p.getPosiljalac() != null ? p.getPosiljalac().getIme() : "Nepoznat") + "\n" +
                            "Za: " + (p.getPrimalac() == null ? "svima" : p.getPrimalac().getIme()) + "\n" +
                            "Vreme: " + p.getVreme() + "\n\n" +
                            "Poruka:\n" + p.getPoruka();
        
        JOptionPane.showMessageDialog(this, fullMessage, "Cela poruka", JOptionPane.INFORMATION_MESSAGE);
    }

    private String formatiranje(Poruka p) {
        String od = p.getPosiljalac() != null ? p.getPosiljalac().getIme() : "Nepoznat";
        String kome = (p.getPrimalac() == null) ? "svima" : p.getPrimalac().getIme();
        String txt = p.getPoruka();
        String kratko = txt.length() > 20 ? txt.substring(0, 17) + "..." : txt;
        return od + " → " + kome + ": " + kratko;
    }

}
